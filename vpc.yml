---
# Cannot get this to work for some reason
#AWSTemplateFormatVersion: AWSTemplateFormatVersion: '2010-09-09'

Description: This template creates a new VPC, using best practices.

Metadata:
    Foo:
        Description: 'something clever'
    Bar:
        Description: 'something clever'

# These show up in the console and are expected to be provided by the operator
Parameters:
    Project:
        Description: 'Project name this VPC is has been created for'
        Type: 'String'
        Default: 'Weapon X'

    Creator:
        Description: 'Tool or person creating this VPC'
        Type: 'String'
        Default: 'CloudFormation'

    Environment:
        Description: 'Context the VPC will be used in.  Common values are production, testing and development.'
        Type: 'String'
        Default: 'development'

    Notes:
        Description: 'Notes to apply, normally edited in the console.'
        Type: 'String'
        Default: 'No notes'

Resources:
    # Create the VPC
    VPC:
        Type: 'AWS::EC2::VPC'
        Properties:
            CidrBlock: '10.0.0.0/16'
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: 'default'
            Tags:
                - Key: 'Name'
                  Value:
                      Ref: 'Project'
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value:
                      'Fn::Join': [ ' ', [ 'VPC for project', !Ref Project ] ]
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'No notes'

    # create an internet accessable subnet in the first availability zone
    PublicSubnetZoneA:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '0'
                - Fn::GetAZs:
                    Ref: AWS::Region
            CidrBlock: '10.0.10.0/24'
            MapPublicIpOnLaunch: 'True'
            VpcId:
                Ref: VPC
            Tags:
                - Key: 'Name'
                  Value: 'Public Zone A'
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value:
                      'Fn::Join': [ ' ', [ 'Public for', !Ref Project ] ]
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'No notes'

    # create a non-internet accessable subnet in the first availability zone
    PrivateSubnetZoneA:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '0'
                - Fn::GetAZs:
                    Ref: AWS::Region
            CidrBlock: '10.0.20.0/24'
            MapPublicIpOnLaunch: 'False'
            VpcId:
                Ref: VPC
            Tags:
                - Key: 'Name'
                  Value: 'Private Zone A'
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value:
                      'Fn::Join': [ ' ', [ 'Private for', !Ref Project ] ]
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'No notes'

    # create an internet accessable subnet in the second availability zone
    PublicSubnetZoneB:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '1'
                - Fn::GetAZs:
                    Ref: AWS::Region
            CidrBlock: '10.0.30.0/24'
            MapPublicIpOnLaunch: 'True'
            VpcId:
                Ref: VPC
            Tags:
                - Key: 'Name'
                  Value: 'Public Zone B'
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value:
                      'Fn::Join': [ ' ', [ 'Public for', !Ref Project ] ]
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'No notes'

    # create a non-internet accessable subnet in the second availability zone
    PrivateSubnetZoneB:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '1'
                - Fn::GetAZs:
                    Ref: AWS::Region
            CidrBlock: '10.0.40.0/24'
            MapPublicIpOnLaunch: 'False'
            VpcId:
                Ref: VPC
            Tags:
                - Key: 'Name'
                  Value: 'Private Zone B'
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value:
                      'Fn::Join': [ ' ', [ 'Private for', !Ref Project ] ]
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'No notes'

    # create a gateway to the internet
    InternetGateway:
        Type: 'AWS::EC2::InternetGateway'
        Properties:
            Tags:
                - Key: 'Name'
                  Value:
                      Ref: 'Project'
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'Controls network traffic entering and leaving the VPC'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'No notes'

    # associate the gateway to the VPC
    GatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId:
                Ref: InternetGateway
            VpcId:
                Ref: VPC

    # create the routing table for the public subnet in availability zone A
    RouteTablePublicZoneA:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', !Ref Project, 'Zone A' ] ]
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'Public subnet routing'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'No notes'

    # create the routing table for the public subnet in availability zone B
    RouteTablePublicZoneB:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', !Ref Project, 'Zone B' ] ]
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'Public subnet routing'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'No notes'

    # route traffic through the internet gateway
    RoutePublicZoneA:
        DependsOn:
            - InternetGateway
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId:
                Ref: InternetGateway
            RouteTableId:
                Ref: RouteTablePublicZoneA

    # route traffic through the internet gateway
    RoutePublicZoneB:
        DependsOn:
            - InternetGateway
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId:
                Ref: InternetGateway
            RouteTableId:
                Ref: RouteTablePublicZoneB

    # associate public subnet to its routing table
    RouteAssociationPublicSubnetZoneA:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: PublicSubnetZoneA
            RouteTableId:
                Ref: RouteTablePublicZoneA

    # associate public subnet to its routing table
    RouteAssociationPublicSubnetZoneB:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: PublicSubnetZoneB
            RouteTableId:
                Ref: RouteTablePublicZoneB

    # we need an EIP for the NAT gateway
    ElasticIpZoneA:
        DependsOn: GatewayAttachment
        Type: AWS::EC2::EIP
        Properties:
            Domain: vpc

    # place the NAT gateway into a public subnet (it needs internet access)
    # putting a second NAT gateway into the other public subnet for failover is recommended but costs a little extra $$$
    NatGatewayZoneA:
        Type: AWS::EC2::NatGateway
        DependsOn: InternetGateway
        Properties:
            AllocationId:
                Fn::GetAtt:
                    - ElasticIpZoneA
                    - AllocationId
            SubnetId:
                Ref: PublicSubnetZoneA

    # create a routing table for the private subnet in availability zone A
    RouteTablePrivateZoneA:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Private', !Ref Project, 'Zone A' ] ]
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'Private subnet routing'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'No notes'

    # create a routing table for the private subnet in availability zone B
    RouteTablePrivateZoneB:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: VPC
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Private', !Ref Project, 'Zone B' ] ]
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'Private subnet routing'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'No notes'

    # associate the private subnet with its routing table
    RouteAssociationPrivateSubnetZoneA:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: PrivateSubnetZoneA
            RouteTableId:
                Ref: RouteTablePrivateZoneA

    # associate the private subnet with its routing table
    RouteAssociationPrivateSubnetZoneB:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: PrivateSubnetZoneB
            RouteTableId:
                Ref: RouteTablePrivateZoneB

    # route outbound traffic to the NAT gateway
    NatRouteZoneA:
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId:
                Ref: NatGatewayZoneA
            RouteTableId:
                Ref: RouteTablePrivateZoneA

    # route outbound traffic to the NAT gateway
    NatRouteZoneB:
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId:
                Ref: NatGatewayZoneA
            RouteTableId:
                Ref: RouteTablePrivateZoneB

    # locked down the bastion servers so only inbound SSH is allowed
    BastionSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: 'SSH traffic only'
            VpcId:
                Ref: VPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ' ', [ 'Bastion', !Ref Project ] ]
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'SSH access to bastion hosts'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'No notes'

    # limit inbound access from the bastion boxes only -- primarily for testing of the network settings
    FromBastionSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: 'Access from the bastion boxes only'
            VpcId:
                Ref: VPC
            SecurityGroupIngress:
                - IpProtocol: '-1'
                  FromPort: 0
                  ToPort: 65535
                  SourceSecurityGroupId:
                      Ref: BastionSecurityGroup
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ' ', [ 'From Bastion', !Ref Project ] ]
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'Access only from Bastion hosts'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'Only useful for network testing'

    # unlimited inbound access -- primarily for testing of the network settings
    WideOpenSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: 'Access from anywhere'
            VpcId:
                Ref: VPC
            SecurityGroupIngress:
                - IpProtocol: '-1'
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ' ', [ 'Wide Open', !Ref Project ] ]
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'Access only from all hosts'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'Only useful for network testing'


Outputs:
    VPC:
        Description: 'Virtual Private Cloud'
        Value:
            Ref: VPC
        Export:
            Name: !Join [ ':', [ !Ref 'AWS::StackName', VPC ] ]
    PublicSubnetA:
        Description: 'Zone A Public Subnet ID'
        Value:
            Ref: PublicSubnetZoneA
        Export:
            Name: !Join [ ':', [ !Ref 'AWS::StackName', PublicSubnetA ] ]
    PrivateSubnetA:
        Description: 'Zone A Private Subnet ID'
        Value:
            Ref: PrivateSubnetZoneA
        Export:
            Name: !Join [ ':', [ !Ref 'AWS::StackName', PrivateSubnetA ] ]
    PublicSubnetB:
        Description: 'Zone B Public Subnet ID'
        Value:
            Ref: PublicSubnetZoneB
        Export:
            Name: !Join [ ':', [ !Ref 'AWS::StackName', PublicSubnetB ] ]
    PrivateSubnet2:
        Description: 'Zone B Private Subnet ID'
        Value:
            Ref: PrivateSubnetZoneB
        Export:
            Name: !Join [ ':', [ !Ref 'AWS::StackName', PrivateSubnetB ] ]
    IGW:
        Description: 'Internet Gateway'
        Value:
            Ref: InternetGateway
        Export:
            Name: !Join [ ':', [ !Ref 'AWS::StackName', IGW ] ]
    ElasticIpZoneA:
        Description: 'Public IP of the NAT Gateway in zone A'
        Value:
            Ref: ElasticIpZoneA
        Export:
            Name: !Join [ ':', [ !Ref 'AWS::StackName', 'Zone-A', ElasticIpZoneA ] ]
